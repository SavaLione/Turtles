<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="group__corecpp" kind="group">
    <compoundname>corecpp</compoundname>
    <title>Core.cpp</title>
    <innernamespace refid="namespacecv">cv</innernamespace>
    <innernamespace refid="namespacestd">std</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__corecpp_1gab8ed3baad2f1d9b6b82bf74da9dd3d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void noiseRemoval</definition>
        <argsstring>(const Mat &amp;mat_in, Mat &amp;mat_out)</argsstring>
        <name>noiseRemoval</name>
        <param>
          <type>const Mat &amp;</type>
          <declname>mat_in</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Функция для обработки изображений. </para>        </briefdescription>
        <detaileddescription>
<para>Проверяет, нужно ли убирать шум на фотографиях.</para><para>Также проверяем режим обработки изображений. Быстрый или нет.</para><para>Для обычного режима используется двусторонний фильтр - bilateralFilter();</para><para>Для быстрого режима используется Гауссовый фильтр размытия изображений - GaussianBlur();</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Матрица с изображением для обработки </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Матрица с обработанным изображением, которая будет возвращена </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="41" column="1" bodyfile="src/core/Core.cpp" bodystart="41" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1ga9e277d82296b5ed9eda6266d8dcc24a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void lineDetection</definition>
        <argsstring>(const Mat &amp;mat_in, Mat &amp;mat_out)</argsstring>
        <name>lineDetection</name>
        <param>
          <type>const Mat &amp;</type>
          <declname>mat_in</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Функция для обработки изображений. </para>        </briefdescription>
        <detaileddescription>
<para>Проверяет, нужно ли находить линии на изображении.</para><para>Также проверяем режим обработки изображений. Быстрый или нет.</para><para>Для обычного режима используется - canny(mat_in, mat_out);</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Матрица с изображением для обработки </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Матрица с обработанным изображением, которая будет возвращена </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="67" column="1" bodyfile="src/core/Core.cpp" bodystart="67" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1ga10a0271bceabc9c1a0d736ab93113212" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void databaseAdd</definition>
        <argsstring>(string filename)</argsstring>
        <name>databaseAdd</name>
        <param>
          <type>string</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="75" column="1" bodyfile="src/core/Core.cpp" bodystart="75" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1ga78cdbfbe907847e78cfb387df76d99f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clearning</definition>
        <argsstring>(string filename, string variable)</argsstring>
        <name>clearning</name>
        <param>
          <type>string</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>string</type>
          <declname>variable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="91" column="1" bodyfile="src/core/Core.cpp" bodystart="91" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1ga76b0b7de3d9fa0de10d66740466ebc14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool detectionLogo</definition>
        <argsstring>(const Mat &amp;mat_logo, string cascadefile)</argsstring>
        <name>detectionLogo</name>
        <param>
          <type>const Mat &amp;</type>
          <declname>mat_logo</declname>
        </param>
        <param>
          <type>string</type>
          <declname>cascadefile</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="106" column="1" bodyfile="src/core/Core.cpp" bodystart="106" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1gae99907f19e7f09055012f68347a57d05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void detection</definition>
        <argsstring>(const Mat &amp;mat_logo)</argsstring>
        <name>detection</name>
        <param>
          <type>const Mat &amp;</type>
          <declname>mat_logo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="130" column="1" bodyfile="src/core/Core.cpp" bodystart="130" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1ga242d25c7a9a1b7212bb890023c8131f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void settingsInitialization</definition>
        <argsstring>()</argsstring>
        <name>settingsInitialization</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="158" column="1" bodyfile="src/core/Core.cpp" bodystart="158" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1gaa85ae460901348b74381239ce0517d5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string description</definition>
        <argsstring>(string value)</argsstring>
        <name>description</name>
        <param>
          <type>string</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Функция для поиска описания марки по файлу с каскадом Хаара </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>Название файла </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Искомое описание марки </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="197" column="1" bodyfile="src/core/Core.cpp" bodystart="197" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="group__corecpp_1gafe1c5d9570a4ccddf9b5105997e3ddb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void canny</definition>
        <argsstring>(const Mat &amp;mat_in, Mat &amp;mat_out)</argsstring>
        <name>canny</name>
        <param>
          <type>const Mat &amp;</type>
          <declname>mat_in</declname>
        </param>
        <param>
          <type>Mat &amp;</type>
          <declname>mat_out</declname>
        </param>
        <briefdescription>
<para>Функция для обработки изображений. </para>        </briefdescription>
        <detaileddescription>
<para>Поиск границ на изображении. Метод canny.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">mat_in</parametername>
</parameternamelist>
<parameterdescription>
<para>Матрица с изображением для обработки </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">mat_out</parametername>
</parameternamelist>
<parameterdescription>
<para>Матрица с обработанным изображением, которая будет возвращена </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/core/Core.cpp" line="214" column="1" bodyfile="src/core/Core.cpp" bodystart="214" bodyend="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
