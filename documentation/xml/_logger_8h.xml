<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_logger_8h" kind="file" language="C++">
    <compoundname>Logger.h</compoundname>
    <includedby refid="_core_8cpp" local="yes">Core.cpp</includedby>
    <includedby refid="_yenot_8cpp" local="yes">Yenot.cpp</includedby>
    <invincdepgraph>
      <node id="32">
        <label>Logger.h</label>
        <link refid="_logger_8h"/>
        <childnode refid="33" relation="include">
        </childnode>
        <childnode refid="34" relation="include">
        </childnode>
      </node>
      <node id="33">
        <label>Core.cpp</label>
        <link refid="_core_8cpp"/>
      </node>
      <node id="34">
        <label>Yenot.cpp</label>
        <link refid="_yenot_8cpp"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="_logger_8h_1a0d6abeb129096910c85ae6cba8bb59cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger</definition>
        <argsstring>(char *level, char *text)</argsstring>
        <name>logger</name>
        <param>
          <type>char *</type>
          <declname>level</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>text</declname>
        </param>
        <briefdescription>
<para>Основная функция для логирования </para>        </briefdescription>
        <detaileddescription>
<para>Логирование возможно с разными уровнями и с выводом времени</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">level</parametername>
</parameternamelist>
<parameterdescription>
<para>Уровень логирования </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">text</parametername>
</parameternamelist>
<parameterdescription>
<para>Текст для логирования </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/Logger.h" line="18" column="1" bodyfile="src/io/Logger.cpp" bodystart="25" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="_logger_8h_1a5e632a6ec68609b973a180293035b94b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void logger_xy</definition>
        <argsstring>(double x, int y)</argsstring>
        <name>logger_xy</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Функция для простого логирования. </para>        </briefdescription>
        <detaileddescription>
<para>Используется для замера скорости выполнения некоторых алгоритмов.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">x</parametername>
</parameternamelist>
<parameterdescription>
<para>Время </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">y</parametername>
</parameternamelist>
<parameterdescription>
<para>Итерация </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/io/Logger.h" line="28" column="1" bodyfile="src/io/Logger.cpp" bodystart="89" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Заголовочный файл модуля логирования </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>SavaLione </para></simplesect>
<simplesect kind="date"><para>1 Apr 2018 </para></simplesect>
</para>    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="7"><highlight class="preprocessor">#ifndef<sp/>LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>LOGGER_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_logger_8h_1a0d6abeb129096910c85ae6cba8bb59cf" kindref="member">logger</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*level,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*text);</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_logger_8h_1a5e632a6ec68609b973a180293035b94b" kindref="member">logger_xy</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y);</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>LOGGER_H</highlight></codeline>
    </programlisting>
    <location file="src/io/Logger.h"/>
  </compounddef>
</doxygen>
