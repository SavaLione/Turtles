.TH "Logger.cpp" 3 "Ср 2 Май 2018" "Yenot" \" -*- nroff -*-
.ad l
.nh
.SH NAME
Logger.cpp \- Модуль логирования\&. Поддерживает логирование со временем и логирование с различными уровнями\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <string>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include <windows\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include '\&.\&.\\core\\Yenot\&.h'\fP
.br
\fC#include '\&.\&.\\core\\Core\&.h'\fP
.br

.SS "Функции"

.in +1c
.ti -1c
.RI "void \fBlogger\fP (char *level, char *text)"
.br
.RI "Основная функция для логирования "
.ti -1c
.RI "void \fBlogger_xy\fP (double x, int y)"
.br
.RI "Функция для простого логирования\&. "
.in -1c
.SH "Подробное описание"
.PP 
Модуль логирования\&. Поддерживает логирование со временем и логирование с различными уровнями\&. 


.PP
\fBАвтор:\fP
.RS 4
SavaLione 
.RE
.PP
\fBДата:\fP
.RS 4
1 Apr 2018 
.RE
.PP

.PP
См\&. определение в файле \fBLogger\&.cpp\fP
.SH "Функции"
.PP 
.SS "void logger (char * level, char * text)"

.PP
Основная функция для логирования Логирование возможно с разными уровнями и с выводом времени
.PP
\fBАргументы:\fP
.RS 4
\fIlevel\fP Уровень логирования 
.br
\fItext\fP Текст для логирования 
.RE
.PP

.PP
См\&. определение в файле Logger\&.cpp строка 25
.SS "void logger_xy (double x, int y)"

.PP
Функция для простого логирования\&. Используется для записи значений скорости выполнения алгоритмов в файл\&.
.PP
\fBАргументы:\fP
.RS 4
\fIx\fP Время 
.br
\fIy\fP Итерация 
.RE
.PP
Проверяем, нужно ли логировать\&.
.PP
Открываем файл для вывода лога в конце и для записи
.PP
Создаём буфер - массив символов char для вывода времени с плавающей запятой
.PP
Присваиваем массиву символов время, полученное с переменной x
.PP
Записываем данные в файл для логирования
.PP
Закрываем файл 
.PP
.nf
if (getSettings((char*)yenot::settings_block_logger, (char*)yenot::settings_log)) {
    std::ofstream fout(yenot::logger_file_name, std::ios_base::app);
    char ch_x[1024];

    sprintf(ch_x, "%f", x);

    fout << ch_x << " " << y << "\n";
    fout\&.close();
}

.fi
.PP
 
.PP
См\&. определение в файле Logger\&.cpp строка 89
.SH "Автор"
.PP 
Автоматически создано Doxygen для Yenot из исходного текста\&.
